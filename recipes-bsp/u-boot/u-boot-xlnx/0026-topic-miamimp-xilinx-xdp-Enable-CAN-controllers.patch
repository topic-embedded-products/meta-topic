From 76722fc0570005f05fde699297c158fa5b99bcaa Mon Sep 17 00:00:00 2001
From: Mike Looijmans <mike.looijmans@topic.nl>
Date: Fri, 2 Oct 2020 10:42:47 +0200
Subject: [PATCH 26/37] topic-miamimp-xilinx-xdp: Enable CAN controllers

Allow CAN controllers to be used (routed to EMIO)
---
 .../psu_init_gpl.c                            |  65 +++++++++++
 .../psu_init_gpl.h                            | 110 ++++++++++++++++++
 2 files changed, 175 insertions(+)

diff --git a/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.c b/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.c
index d418822379..00c42a42ad 100644
--- a/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.c
+++ b/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.c
@@ -1130,6 +1130,54 @@ unsigned long psu_clock_init_data(void)
 		0x013F3F07U, 0x01010600U);
 /*##################################################################### */
 
+    /*
+    * Register : CAN0_REF_CTRL @ 0XFF5E0084
+
+    * Clock active signal. Switch to 0 to disable the clock
+    *  PSU_CRL_APB_CAN0_REF_CTRL_CLKACT                            0x1
+
+    * 6 bit divider
+    *  PSU_CRL_APB_CAN0_REF_CTRL_DIVISOR1                          0x1
+
+    * 6 bit divider
+    *  PSU_CRL_APB_CAN0_REF_CTRL_DIVISOR0                          0xc
+
+    * 000 = IOPLL; 010 = RPLL; 011 = DPLL; (This signal may only be toggled af
+    * ter 4 cycles of the old clock and 4 cycles of the new clock. This is not
+    *  usually an issue, but designers must be aware.)
+    *  PSU_CRL_APB_CAN0_REF_CTRL_SRCSEL                            0x0
+
+    * This register controls this reference clock
+    * (OFFSET, MASK, VALUE)      (0XFF5E0084, 0x013F3F07U ,0x01010C00U)
+    */
+	PSU_Mask_Write(CRL_APB_CAN0_REF_CTRL_OFFSET,
+		0x013F3F07U, 0x01010C00U);
+/*##################################################################### */
+
+    /*
+    * Register : CAN1_REF_CTRL @ 0XFF5E0088
+
+    * Clock active signal. Switch to 0 to disable the clock
+    *  PSU_CRL_APB_CAN1_REF_CTRL_CLKACT                            0x1
+
+    * 6 bit divider
+    *  PSU_CRL_APB_CAN1_REF_CTRL_DIVISOR1                          0x1
+
+    * 6 bit divider
+    *  PSU_CRL_APB_CAN1_REF_CTRL_DIVISOR0                          0xc
+
+    * 000 = IOPLL; 010 = RPLL; 011 = DPLL; (This signal may only be toggled af
+    * ter 4 cycles of the old clock and 4 cycles of the new clock. This is not
+    *  usually an issue, but designers must be aware.)
+    *  PSU_CRL_APB_CAN1_REF_CTRL_SRCSEL                            0x0
+
+    * This register controls this reference clock
+    * (OFFSET, MASK, VALUE)      (0XFF5E0088, 0x013F3F07U ,0x01010C00U)
+    */
+	PSU_Mask_Write(CRL_APB_CAN1_REF_CTRL_OFFSET,
+		0x013F3F07U, 0x01010C00U);
+/*##################################################################### */
+
     /*
     * Register : CPU_R5_CTRL @ 0XFF5E0090
 
@@ -16326,6 +16374,23 @@ unsigned long psu_peripherals_init_data(void)
     /*
     * CAN
     */
+    /*
+    * Register : RST_LPD_IOU2 @ 0XFF5E0238
+
+    * Block level reset
+    *  PSU_CRL_APB_RST_LPD_IOU2_CAN0_RESET                         0
+
+    * Block level reset
+    *  PSU_CRL_APB_RST_LPD_IOU2_CAN1_RESET                         0
+
+    * Software control register for the IOU block. Each bit will cause a singl
+    * erperipheral or part of the peripheral to be reset.
+    * (OFFSET, MASK, VALUE)      (0XFF5E0238, 0x00000180U ,0x00000000U)
+    */
+	PSU_Mask_Write(CRL_APB_RST_LPD_IOU2_OFFSET,
+		0x00000180U, 0x00000000U);
+/*##################################################################### */
+
     /*
     * I2C
     */
diff --git a/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.h b/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.h
index 37c5dc0316..61d78eecfe 100644
--- a/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.h
+++ b/board/topic/zynqmp/zynqmp-topic-miamimp-xilinx-xdp/psu_init_gpl.h
@@ -925,6 +925,10 @@
 #define CRL_APB_SPI0_REF_CTRL_OFFSET                                               0XFF5E007C
 #undef CRL_APB_SPI1_REF_CTRL_OFFSET 
 #define CRL_APB_SPI1_REF_CTRL_OFFSET                                               0XFF5E0080
+#undef CRL_APB_CAN0_REF_CTRL_OFFSET 
+#define CRL_APB_CAN0_REF_CTRL_OFFSET                                               0XFF5E0084
+#undef CRL_APB_CAN1_REF_CTRL_OFFSET 
+#define CRL_APB_CAN1_REF_CTRL_OFFSET                                               0XFF5E0088
 #undef CRL_APB_CPU_R5_CTRL_OFFSET 
 #define CRL_APB_CPU_R5_CTRL_OFFSET                                                 0XFF5E0090
 #undef CRL_APB_IOU_SWITCH_CTRL_OFFSET 
@@ -1466,6 +1470,90 @@
 #define CRL_APB_SPI1_REF_CTRL_SRCSEL_SHIFT                     0
 #define CRL_APB_SPI1_REF_CTRL_SRCSEL_MASK                      0x00000007U
 
+/*
+* Clock active signal. Switch to 0 to disable the clock
+*/
+#undef CRL_APB_CAN0_REF_CTRL_CLKACT_DEFVAL 
+#undef CRL_APB_CAN0_REF_CTRL_CLKACT_SHIFT 
+#undef CRL_APB_CAN0_REF_CTRL_CLKACT_MASK 
+#define CRL_APB_CAN0_REF_CTRL_CLKACT_DEFVAL                    0x01001800
+#define CRL_APB_CAN0_REF_CTRL_CLKACT_SHIFT                     24
+#define CRL_APB_CAN0_REF_CTRL_CLKACT_MASK                      0x01000000U
+
+/*
+* 6 bit divider
+*/
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR1_DEFVAL 
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR1_SHIFT 
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR1_MASK 
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR1_DEFVAL                  0x01001800
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR1_SHIFT                   16
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR1_MASK                    0x003F0000U
+
+/*
+* 6 bit divider
+*/
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR0_DEFVAL 
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR0_SHIFT 
+#undef CRL_APB_CAN0_REF_CTRL_DIVISOR0_MASK 
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR0_DEFVAL                  0x01001800
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR0_SHIFT                   8
+#define CRL_APB_CAN0_REF_CTRL_DIVISOR0_MASK                    0x00003F00U
+
+/*
+* 000 = IOPLL; 010 = RPLL; 011 = DPLL; (This signal may only be toggled af
+    * ter 4 cycles of the old clock and 4 cycles of the new clock. This is not
+    *  usually an issue, but designers must be aware.)
+*/
+#undef CRL_APB_CAN0_REF_CTRL_SRCSEL_DEFVAL 
+#undef CRL_APB_CAN0_REF_CTRL_SRCSEL_SHIFT 
+#undef CRL_APB_CAN0_REF_CTRL_SRCSEL_MASK 
+#define CRL_APB_CAN0_REF_CTRL_SRCSEL_DEFVAL                    0x01001800
+#define CRL_APB_CAN0_REF_CTRL_SRCSEL_SHIFT                     0
+#define CRL_APB_CAN0_REF_CTRL_SRCSEL_MASK                      0x00000007U
+
+/*
+* Clock active signal. Switch to 0 to disable the clock
+*/
+#undef CRL_APB_CAN1_REF_CTRL_CLKACT_DEFVAL 
+#undef CRL_APB_CAN1_REF_CTRL_CLKACT_SHIFT 
+#undef CRL_APB_CAN1_REF_CTRL_CLKACT_MASK 
+#define CRL_APB_CAN1_REF_CTRL_CLKACT_DEFVAL                    0x01001800
+#define CRL_APB_CAN1_REF_CTRL_CLKACT_SHIFT                     24
+#define CRL_APB_CAN1_REF_CTRL_CLKACT_MASK                      0x01000000U
+
+/*
+* 6 bit divider
+*/
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR1_DEFVAL 
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR1_SHIFT 
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR1_MASK 
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR1_DEFVAL                  0x01001800
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR1_SHIFT                   16
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR1_MASK                    0x003F0000U
+
+/*
+* 6 bit divider
+*/
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR0_DEFVAL 
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR0_SHIFT 
+#undef CRL_APB_CAN1_REF_CTRL_DIVISOR0_MASK 
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR0_DEFVAL                  0x01001800
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR0_SHIFT                   8
+#define CRL_APB_CAN1_REF_CTRL_DIVISOR0_MASK                    0x00003F00U
+
+/*
+* 000 = IOPLL; 010 = RPLL; 011 = DPLL; (This signal may only be toggled af
+    * ter 4 cycles of the old clock and 4 cycles of the new clock. This is not
+    *  usually an issue, but designers must be aware.)
+*/
+#undef CRL_APB_CAN1_REF_CTRL_SRCSEL_DEFVAL 
+#undef CRL_APB_CAN1_REF_CTRL_SRCSEL_SHIFT 
+#undef CRL_APB_CAN1_REF_CTRL_SRCSEL_MASK 
+#define CRL_APB_CAN1_REF_CTRL_SRCSEL_DEFVAL                    0x01001800
+#define CRL_APB_CAN1_REF_CTRL_SRCSEL_SHIFT                     0
+#define CRL_APB_CAN1_REF_CTRL_SRCSEL_MASK                      0x00000007U
+
 /*
 * Turing this off will shut down the OCM, some parts of the APM, and preve
     * nt transactions going from the FPD to the LPD and could lead to system h
@@ -33188,6 +33276,8 @@
 #define CRL_APB_RST_LPD_IOU2_OFFSET                                                0XFF5E0238
 #undef CRL_APB_RST_LPD_IOU2_OFFSET 
 #define CRL_APB_RST_LPD_IOU2_OFFSET                                                0XFF5E0238
+#undef CRL_APB_RST_LPD_IOU2_OFFSET 
+#define CRL_APB_RST_LPD_IOU2_OFFSET                                                0XFF5E0238
 #undef UART0_BAUD_RATE_DIVIDER_REG0_OFFSET 
 #define UART0_BAUD_RATE_DIVIDER_REG0_OFFSET                                        0XFF000034
 #undef UART0_BAUD_RATE_GEN_REG0_OFFSET 
@@ -33706,6 +33796,26 @@
 #define IOU_SLCR_SD_CONFIG_REG3_SD1_RETUNETMR_SHIFT            22
 #define IOU_SLCR_SD_CONFIG_REG3_SD1_RETUNETMR_MASK             0x03C00000U
 
+/*
+* Block level reset
+*/
+#undef CRL_APB_RST_LPD_IOU2_CAN0_RESET_DEFVAL 
+#undef CRL_APB_RST_LPD_IOU2_CAN0_RESET_SHIFT 
+#undef CRL_APB_RST_LPD_IOU2_CAN0_RESET_MASK 
+#define CRL_APB_RST_LPD_IOU2_CAN0_RESET_DEFVAL                 0x0017FFFF
+#define CRL_APB_RST_LPD_IOU2_CAN0_RESET_SHIFT                  7
+#define CRL_APB_RST_LPD_IOU2_CAN0_RESET_MASK                   0x00000080U
+
+/*
+* Block level reset
+*/
+#undef CRL_APB_RST_LPD_IOU2_CAN1_RESET_DEFVAL 
+#undef CRL_APB_RST_LPD_IOU2_CAN1_RESET_SHIFT 
+#undef CRL_APB_RST_LPD_IOU2_CAN1_RESET_MASK 
+#define CRL_APB_RST_LPD_IOU2_CAN1_RESET_DEFVAL                 0x0017FFFF
+#define CRL_APB_RST_LPD_IOU2_CAN1_RESET_SHIFT                  8
+#define CRL_APB_RST_LPD_IOU2_CAN1_RESET_MASK                   0x00000100U
+
 /*
 * Block level reset
 */
-- 
2.17.1

