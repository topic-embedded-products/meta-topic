From 6588806d340b003dd4f60dda5deb8cd26db288e3 Mon Sep 17 00:00:00 2001
From: Shikhar Mishra <shikhar.mishra@xilinx.com>
Date: Fri, 6 Dec 2019 15:36:19 +0800
Subject: [PATCH] TOPIC-4_HDP_mechanism_fix

Change-Id: Ib9db4dab924cf7f9068dfe1c560ae4d5d0dd31d4
---
 hdmi/xilinx_drm_hdmi.c | 34 ++++++++++++++++++++++++++++++----
 1 file changed, 30 insertions(+), 4 deletions(-)

diff --git a/hdmi/xilinx_drm_hdmi.c b/hdmi/xilinx_drm_hdmi.c
index 0904cd8..ab9ce40 100755
--- a/hdmi/xilinx_drm_hdmi.c
+++ b/hdmi/xilinx_drm_hdmi.c
@@ -184,6 +184,8 @@ struct xlnx_drm_hdmi {
 	bool audio_init;
 	struct xlnx_hdmitx_audio_data *tx_audio_data;
 	struct platform_device *audio_pdev;
+
+	bool is_connCbCall;
 };
 
 static const u8 Hdcp22Srm[] = {
@@ -297,6 +299,23 @@ static irqreturn_t hdmitx_irq_thread(int irq, void *dev_id)
 	XV_HdmiTxSs_IntrEnable(HdmiTxSsPtr);
 	spin_unlock_irqrestore(&xhdmi->irq_lock, flags);
 
+	if(xhdmi->connector.dev) {
+		if(xhdmi->is_connCbCall == TRUE) {
+			xhdmi->is_connCbCall = FALSE;
+			enum drm_connector_status old_status;
+			old_status = (&(xhdmi->connector))->status;
+			(&(xhdmi->connector))->status = (&(xhdmi->connector))->funcs->detect((&(xhdmi->connector)), false);
+			if (old_status != (&(xhdmi->connector))->status) {
+				if(xhdmi->connector.dev) {
+					drm_kms_helper_hotplug_event(xhdmi->connector.dev);
+				} else {
+					printk("Not sending HOTPLUG event because "
+							"drm device is NULL as drm_connector_init is not called yet.\n");
+				}
+			}
+		}
+	}
+
 	return IRQ_HANDLED;
 }
 
@@ -501,6 +520,9 @@ static void TxConnectCallback(void *CallbackRef)
 	XV_HdmiTxSs *HdmiTxSsPtr = &xhdmi->xv_hdmitxss;
 	XVphy *VphyPtr = xhdmi->xvphy;
 
+	xhdmi->is_connCbCall = 1;
+
+	//printk("\n\nTxConnectCallback called\n\n");
 	dev_dbg(xhdmi->dev,"%s()\n", __func__);
 	xvphy_mutex_lock(xhdmi->phy[0]);
 	if (HdmiTxSsPtr->IsStreamConnected) {
@@ -898,6 +920,7 @@ xlnx_drm_hdmi_connector_best_encoder(struct drm_connector *connector)
 	return &xhdmi->encoder;
 }
 
+
 static struct drm_connector_helper_funcs xlnx_drm_hdmi_connector_helper_funcs = {
 	.get_modes		= xlnx_drm_hdmi_connector_get_modes,
 	.best_encoder	= xlnx_drm_hdmi_connector_best_encoder,
@@ -991,6 +1014,8 @@ static void xlnx_drm_hdmi_encoder_atomic_mode_set(struct drm_encoder *encoder,
 				  struct drm_crtc_state *crtc_state,
 				  struct drm_connector_state *connector_state)
 {
+	//printk("\n\n\nxlnx_drm_hdmi_encoder_atomic_mode_set\n\n\n");
+
 	struct xlnx_drm_hdmi *xhdmi = encoder_to_hdmi(encoder);
 	struct drm_display_mode *mode = &crtc_state->mode;
 	struct drm_display_mode *adjusted_mode = &crtc_state->adjusted_mode;
@@ -1098,7 +1123,8 @@ static void xlnx_drm_hdmi_encoder_atomic_mode_set(struct drm_encoder *encoder,
 	(void)memset((void *)VSIFPtr, 0, sizeof(XHdmiC_VSIF));
 
 	/* Get current Tx Ref clock from PHY */
-	PrevPhyTxRefClock = VphyPtr->HdmiTxRefClkHz;
+	//PrevPhyTxRefClock = VphyPtr->HdmiTxRefClkHz;
+	PrevPhyTxRefClock = clk_get_rate(xhdmi->tmds_clk);
 
 	/* Disable TX TDMS clock */
 	XVphy_Clkout1OBufTdsEnable(VphyPtr, XVPHY_DIR_TX, (FALSE));
@@ -1177,6 +1203,7 @@ static void xlnx_drm_hdmi_encoder_atomic_mode_set(struct drm_encoder *encoder,
 		dev_err(xhdmi->dev, "failed to set tmds clock rate to %d: %d\n",
 					(adjusted_mode->clock * 1000), ret);
 	}
+
 	/* When switching between modes with same Phy RefClk phy tx_refxlk_rdy_en
 	 * signal must be toggled (asserted and de-asserted) to reset phy's
 	 * internal frequency detection state machine
@@ -1187,7 +1214,6 @@ static void xlnx_drm_hdmi_encoder_atomic_mode_set(struct drm_encoder *encoder,
 		dev_dbg(xhdmi->dev,"***** Reset Phy Tx Frequency *******\n");
 		XVphy_ClkDetFreqReset(VphyPtr, 0, XVPHY_DIR_TX);
 	}
-
 	gpiod_set_value_cansleep(xhdmi->tx_refclk_rdy_gpio, 1);
 
 	xhdmi->tx_audio_data->tmds_clk = clk_get_rate(xhdmi->tmds_clk);
-- 
2.7.4

